}
for (i in 1:nrow(zoos)) {
x <- sprintf("There are %s %ss at the Central Park Zoo.", zoos[i, "central"], rownames(zoos)[i])
print(x)
}
sum(zoos[,1])
x <- sprintf("There are %s %ss at the Central Park Zoo.", zoos[i, "central"], rownames(zoos)[i])
print(x)
}
for (i in 1:nrow(zoos)) {
x <- sprintf("There are %s %ss at the Central Park Zoo.", zoos[i, "central.park"], rownames(zoos)[i])
print(x)
}
sum(zoos[,1])
class(rownames(zoos))
# Nested Loops
make.binary.mat <- function(counts.mat) {
# Initalize the new matrix with the same number of rows and columns as your input matrix (counts.mat)
binary.mat <- matrix(nrow = nrow(counts.mat), ncol = ncol(counts.mat))
# Assign row and colummn names to be the same as your input matrix
rownames(binary.mat) <- rownames(counts.mat)
colnames(binary.mat) <- colnames(counts.mat)
# Use nested for loop to count through each i row and each j column in your matrix
for (i in 1:nrow(counts.mat)) {
for (j in 1:ncol(counts.mat)) {
if (counts.mat[i, j] > 0) { # If counts.mat[i, j] > 0, i.e. zoo j has more than 0 of animal type i,
binary.mat[i,j] = 1       # Then set the value of the corresponding element of the new matrix to 1;
} else {                    # Else, if counts.mat[i,j] = 0, i.e. zoo j has no animals of type i,
binary.mat[i,j] = 0       # Then set the value of the corresponding element of the new matrix to 0;
}
# Add a statement here to print out the value in the ith row & jth column of binary.mat
}
}
return(binary.mat)
}
zoos.binary <- make.binary.mat(zoos)
zoos.binary
# Question 9
# Calculates species richness
# Gives equal weight to every species (i.e. just the count of the number of different species)
richness <- function(x) {
rich <-sum(x!=0)
return(rich)
}
# Calculates the Simpson index
# Gives more weight to dominant species than rare ones
simpson <- function(x) {
x <- x[x>0]
n <- sum(x)
simp <- 1-sum((x/n)^2)
return(simp)
}
# Calculates the Shannon index
# Gives more weight to rare species than dominant ones
shannon <- function(x) {
x <- x[x>0]
n <- sum(x)
shan <- -sum((x/n)*log(x/n))
return(shan)
}
names<-c("Species Richness", "Simpson Index", "Shannon Index")
names
make.diversity.mat <- function(counts.mat) {
# Initalize a new empty 3x3 new matrix called diversity.mat
diversity.mat <- matrix(nrow = nrow(counts.mat), ncol = ncol(counts.mat))
# Give row and column names to the matrix corresponding to the diversity indices and zoo names, respectively
rownames(diversity.mat) <- rownames(names)
colnames(diversity.mat) <- colnames(counts.mat)
# Loop through each column of counts.mat (i.e. the 'zoos' matrix)
for (i in 1:ncol(counts.mat)) {
diversity.mat[1,i]<- richness(zoos[,i])
diversity.mat[2,i]<-simpson(zoos[,i])
diversity.mat[3,i]<-shannon(zoos[,i])
print diversity.mat[,i]
}
# Use the same counter to loop through the columns of diversity.mat to which you are adding you diversity calculations
# Calculate each diversity index separately (HINT: There should be 1 line of code for each diversity calculation)
# For debugging purposes, print out each column of diversity.mat once you set all three values
# Return diversity.mat
return diversity.mat
}
print(diversity.mat[,i])
make.diversity.mat <- function(counts.mat) {
# Initalize a new empty 3x3 new matrix called diversity.mat
diversity.mat <- matrix(nrow = nrow(counts.mat), ncol = ncol(counts.mat))
# Give row and column names to the matrix corresponding to the diversity indices and zoo names, respectively
rownames(diversity.mat) <- rownames(names)
colnames(diversity.mat) <- colnames(counts.mat)
# Loop through each column of counts.mat (i.e. the 'zoos' matrix)
for (i in 1:ncol(counts.mat)) {
diversity.mat[1,i]<- richness(zoos[,i])
diversity.mat[2,i]<-simpson(zoos[,i])
diversity.mat[3,i]<-shannon(zoos[,i])
print(diversity.mat[,i])
}
# Use the same counter to loop through the columns of diversity.mat to which you are adding you diversity calculations
# Calculate each diversity index separately (HINT: There should be 1 line of code for each diversity calculation)
# For debugging purposes, print out each column of diversity.mat once you set all three values
# Return diversity.mat
return(diversity.mat)
}
# Compute the diversity matrix for the zoos matrix and print it out
zoos.diversity <- make.diversity.mat(zoos)
zoos.diversity
require("ggplot2")
require("reshape2")
cnv_summary_data = read.table(text = "
Category Type Count
RDV Up&DownCNV  4045
RDV UpCNV 95
RDV PAV 7049
", header= TRUE, sep = "")
ggplot(cnv_summary_data, aes(x=Category, y=Count, fill=Type)) + geom_bar(stat="identity") +
labs(x = "Genes", y = "Count") +
theme(axis.ticks=element_blank(),axis.text=element_text(size=16))
cnv_summary_data = read.table(text = "
Category Type Count
Genes Unaffected 39705
Genes Affected 11189
", header= TRUE, sep = "")
ggplot(cnv_summary_data, aes(x=Category, y=Count, fill=Type)) + geom_bar(stat="identity") +
labs(x = "Genes", y = "Count") +
theme(axis.ticks=element_blank(),axis.text=element_text(size=16))
require("ggplot2")
require("reshape2")
cnv_summary_data = read.table(text = "
Category Type Count
RDV Up&DownCNV  4045
RDV UpCNV 95
RDV PAV 7049
", header= TRUE, sep = "")
ggplot(cnv_summary_data, aes(x=Category, y=Count, fill=Type)) + geom_bar(stat="identity") +
labs(x = "Genes", y = "Count") +
theme(axis.ticks=element_blank(),axis.text=element_text(size=16))
cnv_summary_data = read.table(text = "
Category Type Count
Genes Unaffected 39705
Genes Affected 11189
", header= TRUE, sep = "")
ggplot(cnv_summary_data, aes(x=Category, y=Count, fill=Type)) + geom_bar(stat="identity") +
labs(x = "Genes", y = "Count") +
theme(axis.ticks=element_blank(),axis.text=element_text(size=16))
install.packages("ranger")
?ranger
??ranger
?Ranger
library("ranger")
?ranger
Species
require(ranger)
Species
iris
ranger(Species ~ ., data = iris)
rg.iris <- ranger(Species ~ ., data = iris, importance = "impurity")
rg.iris$variable.importance
train.idx <- sample(nrow(iris), 2/3 * nrow(iris))
iris.train <- iris[train.idx, ]
iris.test <- iris[-train.idx, ]
rg.iris <- ranger(Species ~ ., data = iris.train, write.forest = TRUE)
pred.iris <- predict(rg.iris, dat = iris.test)
table(iris.test$Species, pred.iris$predictions)
iris.test
type
class
class(iris$Species)
library("data.table")
library("dplyr")
library("ggplot2")
library("reshape2")
library("ggrepel")
library("ggplot2")
library("data.table")
library("data.table")
dat <- fopen("G:\Development\repeats\consensus-analysis\repeat_sizes.txt")
dat <- fopen("G:\\Development\repeats\consensus-analysis\repeat_sizes.txt")
dat <- fopen("G:\\Development\\repeats\\consensus-analysis\\repeat_sizes.txt")
library("data.table")
dat <- fopen("G:\\Development\\repeats\\consensus-analysis\\repeat_sizes.txt")
dat <- fread("G:\\Development\\repeats\\consensus-analysis\\repeat_sizes.txt")
hist(dat)
dat
dat[,2]
dat[2]
dat[2,]
dat[,2]
dat[V2]
dat$V2
hist(dat$V2)
library("ggplot2")
qplot(dat$V2, geom="histogram")
ggplot(data=dat$V2, aes(dat$V2)) + geom_histogram()
ggplot(data=dat$V2, aes(dat$V1)) + geom_histogram()
ggplot(data=dat, aes(dat$V1)) + geom_histogram()
ggplot(data=dat, aes(dat$V2)) + geom_histogram()
ggplot(data=dat,
aes(dat$V2),
binwidth = 0.5
)
+ geom_histogram()
ggplot(data=dat,
aes(dat$V2),
binwidth = 0.5)
+ geom_histogram()
ggplot(data=dat,
aes(dat$V2)
)
+ geom_histogram()
ggplot(data=dat,
aes(dat$V2),
binwidth = 0.5) +
geom_histogram()
ggplot(data=dat,
aes(dat$V2),
bins = 100,
binwidth = 0.5) +
geom_histogram()
ggplot(data=dat,
aes(dat$V2),
bins = 100,
binwidth = 0.5) +
geom_histogram()
ggplot(data=dat,
aes(dat$V2),
binwidth = 50) +
geom_histogram()
ggplot(data=dat,
aes(dat$V2),
binwidth = 1000) +
geom_histogram()
ggplot(data=dat,
aes(dat$V2),
binwidth = 5000) +
geom_histogram()
ggplot(data=dat,
aes(dat$V2)
) +
geom_histogram()
ggplot(data=dat,
aes(dat$V2)
) +
geom_histogram()
ggplot(data=dat,
aes(dat$V2)
) +
geom_histogram()
ggplot(data=dat,
aes(dat$V2),
xlim=c(0,5000)
) +
geom_histogram()
ggplot(data=dat,
aes(dat$V2),
xlim=c(0,5000)
) +
geom_histogram(xlim=c(0,5000))
ggplot(data=dat,
aes(dat$V2),
xlim=c(0,5000)
) +
geom_histogram(xlim=c(0,5000))
qplot(dat$V2
xlim=c(0,5000))
qplot(dat$V2,
xlim=c(0,5000))
qplot(dat$V2,
xlim=c(0,1000))
qplot(dat$V2,
xlim=c(0,5000))
t.test()
psyma <- c(59.97,
60.16,
60.14,
60.43,
60.37,
60.40,
60.23,
60.26,
60.36,
60.36,
60.31,
60.54,
60.35,
60.48,
60.37,
60.20)
psyma
accs <- c(57.91,
58.91,
59.98,
58.58,
60.00,
59.74,
60.66,
58.38,
59.06,
59.86,
59.35,
57.45,
58.49,
60.21)
t-test(psyma, accs)
t.test(psyma, accs)
t.test(c(1,2,1,2,1,2,1,2,1,2), c(2,1,2,2,2,1,1,1,1,2,2,2,2,1,1,1,2,2,1,2,1,2,2,1,1,2,1))
psymb <- c(62.37,
62.43,
62.24,
62.42,
62.42,
62.40,
62.60,
62.60,
62.43,
62.36,
62.18,
62.33,
62.46,
62.45,
62.42,
62.31)
chrs <- c(62.67,
62.65,
62.79,
62.79,
62.72,
62.73,
62.77,
62.83,
62.72,
62.60,
62.57,
62.75,
62.64,
62.76,
62.72,
62.74)
gc_content <- fread("G:\\gc-content.csv")
library("data.frame")
library("data.table")
gc_content <- fread("G:\\gc-content.csv")
gc_content <- fread("G:\\gc_content.csv")
gc_content
aov(gc_content)
View(gc_content)
aov(V1 ~ V2, data=gc_content)
plot(V1 ~ V2, data=gc_content)
results =plot(V1 ~ V2, data=gc_content)
results = aov(V1 ~ V2, data=gc_content)
summary(results)
pairwise.t.test(gc_content$V1, gc_content$V2, p.adjust = bonferroni)
pairwise.t.test(gc_content$V1, gc_content$V2, p.adjust = bonferoni)
pairwise.t.test(gc_content$V1, gc_content$V2, p.adjust = bonferonni)
pairwise.t.test(gc_content$V1, gc_content$V2, p.adjust = "bonferroni")
var
var(acc)
var(accs)
var(psyma)
sd(accs)
sd(psyma)
sd(psymb)
sd(chr)
sd(chrs)
var(chrs)
var(psymb)
var(psyma)
var(accs)
var(psyma)
var(psymb)
pairwise.t.test(gc_content$V1, gc_content$V2, p.adjust = "bonferroni")
library("ggplot2")
library("data.table")
library("svglite")
setwd("G:/Development/pacbio-paper-code/core-pan-analysis/analysis")
plot_core_qplot <- function(filename, title){
sc <- scale_fill_continuous()
sc$legend <- FALSE
coregenes <- fread(filename)
cg <- qplot(data=coregenes, x=V1, y=V2,
color=V1,
xlab = "Gene Clusters",
ylab = "Genome Number",
main = title) + guides(FALSE)
coregenes <- 0
cg
}
plotcp <- function(corefile, panfile, title){
coregenes <- fread(corefile)
pangenome <- fread("pan-genome.tsv")
cg <- ggplot() +
geom_point(data=coregenes, aes(x=V1, y=V2), size=2, shape=20, color = "#2c7fb8") +
geom_smooth(data=coregenes, aes(x=V1, y=V2), method="auto", se=FALSE, fullrange=FALSE, level=0.99, inherit.aes=FALSE, color = "#7fcdbb") +
geom_point(data=pangenome, aes(x=V1, y=V2), size=2, shape=20, color = "#31a354") +
geom_smooth(data=pangenome, aes(x=V1, y=V2), method="auto", se=FALSE, fullrange=FALSE, level=0.99, color = "#addd8e") +
xlab("Genome Number") +
ylab("Gene Clusters") +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle(title)
cg
}
all <- plotcp("core-genome.tsv", "pan-genome.tsv", "Core and Pan-Genome Curve")
all
ggsave(file="all-genome.svg", plot=cg, width=10, height=8)
ggsave(file="all-genome.pdf", plot=cg, width=10, height=8)
ggsave(file="all-genome.png", plot=cg, width=10, height=8)
ggsave(file="all-genome.svg", plot=all, width=10, height=8)
ggsave(file="all-genome.pdf", plot=all, width=10, height=8)
ggsave(file="all-genome.png", plot=all, width=10, height=8)
ggsave(file="all-genome.jpeg", plot=all, width=10, height=8, dpi=300)
chr <- plotcp("core-main-genome.tsv", "pan-main-genome.tsv", "Chromosome Core and Pan-Genome Curve")
chr
ggsave(file="chr-genome.svg", plot=chr, width=10, height=8)
ggsave(file="chr-genome.pdf", plot=chr, width=10, height=8)
ggsave(file="chr-genome.png", plot=chr, width=10, height=8)
ggsave(file="chr-genome.jpeg", plot=chr, width=10, height=8, dpi=300)
psyma <- plotcp("core-psyma-genome.tsv", "pan-psyma-genome.tsv", "pSymA Core and Pan-Genome Curve")
psyma
ggsave(file="psyma-genome.svg", plot=psyma, width=10, height=8)
ggsave(file="psyma-genome.pdf", plot=psyma, width=10, height=8)
ggsave(file="psyma-genome.jpeg", plot=psyma, width=10, height=8, dpi=300)
psymb <- plotcp("core-psymb-genome.tsv", "pan-psymb-genome.tsv", "pSymB Core and Pan-Genome Curve")
psymb
ggsave(file="psymb-genome.svg", plot=psymb, width=10, height=8)
ggsave(file="psymb-genome.pdf", plot=psymb, width=10, height=8)
ggsave(file="psymb-genome.png", plot=psymb, width=10, height=8)
ggsave(file="psymb-genome.jpeg", plot=psymb, width=10, height=8, dpi=300)
psymb
chr
all
psymb <- plotcp("core-psymb-genome.tsv", "pan-psymb-genome.tsv", "pSymB Core and Pan-Genome Curve")
psymb
plotcp <- function(corefile, panfile, title){
coregenes <- fread(corefile)
pangenome <- fread(panfile)
cg <- ggplot() +
geom_point(data=coregenes, aes(x=V1, y=V2), size=2, shape=20, color = "#2c7fb8") +
geom_smooth(data=coregenes, aes(x=V1, y=V2), method="auto", se=FALSE, fullrange=FALSE, level=0.99, inherit.aes=FALSE, color = "#7fcdbb") +
geom_point(data=pangenome, aes(x=V1, y=V2), size=2, shape=20, color = "#31a354") +
geom_smooth(data=pangenome, aes(x=V1, y=V2), method="auto", se=FALSE, fullrange=FALSE, level=0.99, color = "#addd8e") +
xlab("Genome Number") +
ylab("Gene Clusters") +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle(title)
cg
}
psymb <- plotcp("core-psymb-genome.tsv", "pan-psymb-genome.tsv", "pSymB Core and Pan-Genome Curve")
psymb
all <- plotcp("core-genome.tsv", "pan-genome.tsv", "Core and Pan-Genome Curve")
all
ggsave(file="all-genome.svg", plot=all, width=10, height=8)
ggsave(file="all-genome.pdf", plot=all, width=10, height=8)
ggsave(file="all-genome.png", plot=all, width=10, height=8)
ggsave(file="all-genome.jpeg", plot=all, width=10, height=8, dpi=300)
chr <- plotcp("core-main-genome.tsv", "pan-main-genome.tsv", "Chromosome Core and Pan-Genome Curve")
chr
ggsave(file="chr-genome.svg", plot=chr, width=10, height=8)
ggsave(file="chr-genome.pdf", plot=chr, width=10, height=8)
ggsave(file="chr-genome.png", plot=chr, width=10, height=8)
ggsave(file="chr-genome.jpeg", plot=chr, width=10, height=8, dpi=300)
psyma <- plotcp("core-psyma-genome.tsv", "pan-psyma-genome.tsv", "pSymA Core and Pan-Genome Curve")
psyma
ggsave(file="psyma-genome.svg", plot=psyma, width=10, height=8)
ggsave(file="psyma-genome.pdf", plot=psyma, width=10, height=8)
ggsave(file="psyma-genome.png", plot=psyma, width=10, height=8)
ggsave(file="psyma-genome.jpeg", plot=psyma, width=10, height=8, dpi=300)
psymb <- plotcp("core-psymb-genome.tsv", "pan-psymb-genome.tsv", "pSymB Core and Pan-Genome Curve")
psymb
ggsave(file="psymb-genome.svg", plot=psymb, width=10, height=8)
ggsave(file="psymb-genome.pdf", plot=psymb, width=10, height=8)
ggsave(file="psymb-genome.png", plot=psymb, width=10, height=8)
ggsave(file="psymb-genome.jpeg", plot=psymb, width=10, height=8, dpi=300)
all <- plotcp("core-genome.tsv", "pan-genome.tsv", "Core and Pan-Genome Curve")
all
psyma <- plotcp("core-psyma-genome.tsv", "pan-psyma-genome.tsv", "pSymA Core and Pan-Genome Curve")
psyma
ggsave(file="psyma-genome.svg", plot=psyma, width=10, height=8)
ggsave(file="psyma-genome.pdf", plot=psyma, width=10, height=8)
ggsave(file="psyma-genome.png", plot=psyma, width=10, height=8)
ggsave(file="psyma-genome.jpeg", plot=psyma, width=10, height=8, dpi=300)
psymb <- plotcp("core-psymb-genome.tsv", "pan-psymb-genome.tsv", "pSymB Core and Pan-Genome Curve")
psymb
psyma_acc <- plotcp("core-psyma-acc-genome.tsv", "pan-psyma-acc-genome.tsv", "pSymA Core and Pan-Genome Curve")
psyma_acc
psyma
all <- plotcp("core-genome.tsv", "pan-genome.tsv", "Core and Pan-Genome Curve")
all
ggsave(file="all-genome.svg", plot=all, width=10, height=8)
ggsave(file="all-genome.pdf", plot=all, width=10, height=8)
ggsave(file="all-genome.png", plot=all, width=10, height=8)
ggsave(file="all-genome.jpeg", plot=all, width=10, height=8, dpi=300)
chr <- plotcp("core-main-genome.tsv", "pan-main-genome.tsv", "Chromosome Core and Pan-Genome Curve")
chr
ggsave(file="chr-genome.svg", plot=chr, width=10, height=8)
ggsave(file="chr-genome.pdf", plot=chr, width=10, height=8)
ggsave(file="chr-genome.png", plot=chr, width=10, height=8)
ggsave(file="chr-genome.jpeg", plot=chr, width=10, height=8, dpi=300)
psyma <- plotcp("core-psyma-genome.tsv", "pan-psyma-genome.tsv", "pSymA Core and Pan-Genome Curve")
psyma
ggsave(file="psyma-genome.svg", plot=psyma, width=10, height=8)
ggsave(file="psyma-genome.pdf", plot=psyma, width=10, height=8)
ggsave(file="psyma-genome.png", plot=psyma, width=10, height=8)
ggsave(file="psyma-genome.jpeg", plot=psyma, width=10, height=8, dpi=300)
psymb <- plotcp("core-psymb-genome.tsv", "pan-psymb-genome.tsv", "pSymB Core and Pan-Genome Curve")
psymb
ggsave(file="psymb-genome.svg", plot=psymb, width=10, height=8)
ggsave(file="psymb-genome.pdf", plot=psymb, width=10, height=8)
ggsave(file="psymb-genome.png", plot=psymb, width=10, height=8)
ggsave(file="psymb-genome.jpeg", plot=psymb, width=10, height=8, dpi=300)
psyma_acc <- plotcp("core-psyma-acc-genome.tsv", "pan-psyma-acc-genome.tsv", "pSymA Core and Pan-Genome Curve")
psyma_acc
ggsave(file="psyma-acc-genome.svg", plot=psyma, width=10, height=8)
ggsave(file="psyma-acc-genome.pdf", plot=psyma, width=10, height=8)
ggsave(file="psyma-acc-genome.png", plot=psyma, width=10, height=8)
ggsave(file="psyma-acc-genome.jpeg", plot=psyma, width=10, height=8, dpi=300)
